"""
Алгоритм бинарного поиска - это эффективный алгоритм для поиска элемента в отсортированном массиве данных.
Он работает путем повторяющихся делений массива пополам и проверки, находится ли искомый элемент в левой или
правой половине массива. Алгоритм продолжает делить массив на две части до тех пор, пока элемент не будет найден или
пока массив не будет полностью исчерпан.

Процедура поиска элемента в отсортированном массиве с использованием алгоритма бинарного поиска заключается
в следующих шагах:

1. Определить середину массива.
2. Сравнить искомый элемент с элементом, расположенным посередине массива.
3. Если искомый элемент меньше серединного элемента, то поиск продолжается только в левой половине массива.
Иначе, если искомый элемент больше серединного элемента, то поиск продолжается только в правой половине массива.
4. Если искомый элемент совпадает с серединным элементом, то поиск завершается успешно.
5. Если элемент не найден, то поиск завершается неудачно.

Алгоритм бинарного поиска работает за логарифмическое время O(log(n))),
что означает, что время его выполнения увеличивается медленно по мере увеличения размера массива данных.
Он является одним из наиболее эффективных алгоритмов поиска элемента в отсортированном массиве.
"""
arr = [23, 45, 1, 34, 4, 99, 5, 17]
target = 99


def binary_search(arr, target):
    arr = sorted(arr)
    print(f'sorted array: {arr}')
    print(f'target: {target}')
    low = 0
    high = len(arr) - 1
    print(f'low: {low}, high: {high}')
    while low <= high:
        mid = (low + high) // 2
        print(f'mid: {mid}')
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            print('mid < target')
            low = mid + 1
        else:
            print('mid > target')
            high = mid - 1
    return -1


h = binary_search(arr, target)
print(h)

